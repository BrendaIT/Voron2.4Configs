#Overrides of /klipper/klippy/extras/display/menu.cfg

##########DISABLEMENTS##########
[menu __main __octoprint]
type: disabled

[menu __main __control __fanonoff]
type: disabled

[menu __main __control __caselightonoff]
type: disabled
################################

##OVERRIDE PAUSE
[menu __main __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    PAUSE
#
[menu __main __octoprint __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode:
    RESUME

#OVERRIDE INPUT_STEP DISTANCE
[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.01
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

#OVERRIDE FILAMENT MACROS / DISABLE "SLOW" VERSIONS
[menu __main __filament __hotloadf]
type: input
name: H load: {menu.input}
input: 230
input_min: 180
input_max: 300
input_step: 10
gcode:
    HOT_LOAD T={menu.input}
	
[menu __main __filament __hotunloadf]
type: input
name: H unload: {menu.input}
input: 230
input_min: 180
input_max: 300
input_step: 10
gcode:
    HOT_UNLOAD T={menu.input}

[menu __main __filament __loadf]
type: command
name: Load Filament
gcode:
	LOAD_FILAMENT
	
[menu __main __filament __loads]
type: disabled
	
[menu __main __filament __unloadf]
type: command
name: Unload Filament
gcode:
	UNLOAD_FILAMENT
	
[menu __main __filament __unloads]
type: disabled

#ADD FAST FILAMENT FEED	
[menu __main __filament __feedfast]
type: input
name: Feed fast: {'%.1f' % menu.input}
input: 10
input_step: 10
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F300
    RESTORE_GCODE_STATE NAME=__filament__load
	
# OVERRIDE CASELIGHT STEP
[menu __main __control __caselightpwm]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'%3d' % (menu.input*100)}%
input: {printer['output_pin caselight'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.1
gcode:
    SET_PIN PIN=caselight VALUE={menu.input}

[menu __main __control __led]
type: input
name: Display Lights {'ON ' if menu.input else 'OFF'}
input: 0
enable: True
input_min: 0
input_max: 1
input_step: 1
gcode:
    {% if menu.input %}
        DISPLAY_LED_ON
    {% else %}
        DISPLAY_LED_OFF
    {% endif %}
	
# ADDITIONAL CONTROL COMMANDS
[menu __main __control __G32]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: G32
gcode: G32

[menu __main __control __QGL]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: QGL
gcode: QUAD_GANTRY_LEVEL

[menu __main __control __mesh]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Mesh
gcode: BED_MESH_CALIBRATE

[menu __main __control __qglmesh]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: QGL & Mesh
gcode: 
	QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE

[menu __main __control __parkfront]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park front
gcode: PARKFRONT

[menu __main __control __parkfrontlow]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park front low
gcode: PARKFRONTLOW

[menu __main __control __parkrear]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park rear
gcode: PARKREAR

[menu __main __control __parkcenter]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park center
gcode: PARKCENTER

[menu __main __control __parkbed]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Park bed
gcode: PARKBED

#[menu __main __control __BEDFANSOFF]
#type: command
#enable: {not printer.idle_timeout.state == "Printing"}
#name: BedFansOff
#gcode: BEDFANSOFF

#[menu __main __control __BEDFANSFAST]
#type: command
#enable: {not printer.idle_timeout.state == "Printing"}
#name: BedFansFast
#gcode: BEDFANSFAST

#[menu __main __control __exhaustspeed]
#type: input
#name: Exhaust: {'%3d' % (menu.input*100)}%
#input: {printer['fan_generic Exhaust'].speed}
#input_min: 0
#input_max: 1
#input_step: 0.1
#gcode:
#    SET_FAN_SPEED FAN=Exhaust SPEED={menu.input}
[menu __main __control __fanonoff]
type: disabled

[menu __main __control __fanspeed]
type: disabled

## Add menu for fan, chamber and filter
[menu __main __control __fan]
type: list
name: Fan 
index: 5

[menu __main __control __fan __partcooling]
type: list
enable: {'fan' in printer}
name: Fan {'%3d' % (printer.fan.speed*100)}%

[menu __main __control __fan __chamber]
type: list
enable: {'temperature_fan chamber' in printer}
name: Chamber {'%2dC' % (printer['temperature_fan chamber'].target) if printer['temperature_fan chamber'].target else 'OFF'}

[menu __main __control __fan __filter]
type: list
enable: {'fan_generic filter' in printer}
name: Filter {'%3d' % (printer['fan_generic filter'].speed*100)}%

[menu __main __control __fan __partcooling __fanonoff]
type: input
name: Toggle: {'ON' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
  M106 S{255 if menu.input else 0}

[menu __main __control __fan __partcooling __fanspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
  M106 S{'%d' % (menu.input*255)}

[menu __main __control __fan __chamber __chamberonoff]
type: input
name: Toggle: {'ON' if menu.input else 'OFF'}
input: {printer['temperature_fan chamber'].target}
input_min: 0
input_max: 1
input_step: 1
gcode:
  {% set temp_on = printer["gcode_macro _USER_VARIABLE"].vent_on|int %}
  M141 S{temp_on if menu.input else 0}    
    
[menu __main __control __fan __chamber __chamberfanspeed]
type: input
name: Temp: {'%2dC' % (menu.input) if menu.input else 'OFF'}
input: {printer['temperature_fan chamber'].target}
input_min: {printer.configfile.settings['temperature_fan chamber'].min_temp|int}
input_max: {printer.configfile.settings['temperature_fan chamber'].max_temp|int}
input_step: 1
gcode:
    M141 S{'%d' % (menu.input)}

[menu __main __control __fan __filter __filteronoff]
type: input
name: Toggle: {'ON ' if menu.input else 'OFF'}
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
 {% if menu.input %}
   _FILTER_ON
 {% else %}
   _SET_FILTER S=0.0
 {% endif %}

[menu __main __control __fan __filter __filterspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    _SET_FILTER S={menu.input}
	
[menu __main __control __off]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: OFF
gcode: OFF

#[menu __main __control __exhaustoff]
#type: command
#name: Exhaust off
#gcode: SET_FAN_SPEED FAN=Exhaust SPEED=0
#	
#[menu __main __control __exhauston]
#type: command
#name: Exhaust on
#gcode: SET_FAN_SPEED FAN=Exhaust SPEED=1

[menu __main __temp __heatsoak]
type: input
name: Heatsoak: {menu.input}
input: 110
input_min: 80
input_max: 110
input_step: 10
gcode:
    HEATSOAK T={menu.input}

##ADD PETG PREHEAT
#[menu __main __temp __preheat_petg]
#type: list
#name: Preheat PETG
#
#[menu __main __temp __preheat_petg __all]
#type: command
#enable: {('extruder' in printer) and ('heater_bed' in printer)}
#name: Preheat all
#gcode:
#    M140 S80
#    M104 S230
#
#[menu __main __temp __preheat_petg __hotend]
#type: command
#enable: {'extruder' in printer}
#name: Preheat hotend
#gcode: M104 S230
#
#[menu __main __temp __preheat_petg __bed]
#type: command
#enable: {'heater_bed' in printer}
#name: Preheat bed
#gcode: M140 S80

[menu __main __control __runoutonoff]
type: input
enable: {'filament_motion_sensor btt_sensor' in printer.configfile.settings}
name: Runout: {'ON ' if menu.input else 'OFF'}
input: 1
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
  SET_FILAMENT_SENSOR SENSOR=btt_sensor ENABLE={menu.input|int}

### menu setup ###
[menu __main __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __main __setup __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __main __setup __restart]
type: list
name: Restart

[menu __main __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
gcode: RESTART

[menu __main __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __main __setup __tuning]
type: list
name: PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type: input
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Hotend PID {'%3d' % menu.input}
input: {printer.extruder.target}
input_min: 190
input_max: 260
input_step: 5
gcode: 
    M117 HOTEND PID TUNING {menu.input}
    M118 HOTEND PID TUNING {menu.input}
    PID_CALIBRATE HEATER=extruder TARGET={menu.input} WRITE_FILE=1
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5

[menu __main __setup __tuning __hotbed_pid_tuning]
type: input
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Hotbed PID {'%3d' % menu.input}
input: {printer.heater_bed.target}
input_min: 40
input_max: 125
input_step: 5
gcode: 
    M117 BED PID Tuning {menu.input}
    M118 BED PID Tuning {menu.input}
    PID_CALIBRATE HEATER=heater_bed TARGET={menu.input} WRITE_FILE=1
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5