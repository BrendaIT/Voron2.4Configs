[include menu.cfg]
[include logo.cfg]
########################################
# EXP1 / EXP2 (display) pins
########################################
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays.

[display]
## mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
contrast: 63
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
display_group: __voron_display
#menu_root: __voron_main
menu_timeout: 60
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2


[output_pin BEEPER_pin]
pin: EXP1_1
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.0024  #0.001
#scale: 1000

#[gcode_macro M300] DISATIVATO PROVA
#gcode:
#    {% set S = params.S|default(1000)|int %}
#    {% set P = params.P|default(100)|int %}
#    SET_PIN PIN=BEEPER_pin VALUE={S}
#    G4 P{P}
#    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro M300]
gcode:
    {% set S = params.S|default(440)|int %}
    {% set P = params.P|default(100)|int %}
    {% if S|float != 0 %}
        SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={1/S|float}
    {% endif %}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0



#[neopixel btt_mini12864]
## To control Neopixel RGB in mini12864 display
#pin: EXP1_6
#chain_count: 3
#color_order: RGB
#initial_RED: 0.1
#initial_GREEN: 0.5
#initial_BLUE: 0.5


[neopixel btt_mini12864]
pin: EXP1_6
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: RGB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 0.8
initial_GREEN: 0.3
initial_BLUE: 0.05
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.
## Set RGB values on boot up for each Neopixel.
## Index 1 = display, Index 2 and 3 = Knob

[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
 SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
 SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=2 TRANSMIT=0
 SET_LED LED=btt_mini12864 RED=0 GREEN=0.4 BLUE=1 INDEX=3

#[display_status]
#[respond]

#[respond]
#default_type: command

#------------------------------------------
[gcode_macro DISPLAY_LED_OFF]
gcode: 
  SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0    

#	Set RGB values for each Neopixel. 
#	Index 1 = display, Index 2 and 3 = Knob
[gcode_macro DISPLAY_LED_ON]
#default_parameter_TRANSMIT: 1
gcode: 
#  {% set transmit = params.TRANSMIT|default(1)|float %}
  SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
  SET_LED LED=btt_mini12864 RED=0.2 GREEN=0.2 BLUE=0.1 INDEX=2 TRANSMIT=0
  SET_LED LED=btt_mini12864 RED=0.2 GREEN=0.2 BLUE=0.1 INDEX=3 TRANSMIT=1  #{TRANSMIT}

[gcode_macro LCDRGB]
gcode:
    {% set r = params.R|default(1)|float %}
    {% set g = params.G|default(1)|float %}
    {% set b = params.B|default(1)|float %}

    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=3

[gcode_macro RESETRGB]
gcode:
    SET_LED LED=btt_mini12864 RED=1 GREEN=0.0 BLUE=0.0 INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.0 GREEN=0.0 BLUE=1.0 INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.0 GREEN=0.4 BLUE=1.0 INDEX=3

[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
    RESETRGB

[display_glyph chamber]
data:
  ................
  ****************
  *....*....*....*
  *....*....*....*
  *....******....*
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...*......*...*
  ****************
  ................


[display_glyph voron]
data:
 ......***.......
 ....*******.....
 ...*********....
 .*************..
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 **..***..******.
 ******..***..**.
 *****..***..***.
 ****..***..****.
 ***..***..*****.
 .*************..
 ...*********....
 ....*******.....
 ......***.......
 
[display_glyph voron_heart]
data:
 ................
 ..****...*****..
 .**************.
 ******..**..****
 *****..**..*****
 ****..**..******
 *******..*******
 .*****..**..***.
 .****..**..****.
 ..**..**..****..
 ...**********...
 ....********....
 .....******.....
 ......****......
 .......**.......
 ................

[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display chamber]
position: 2, 0
text:
  {% set chamber = printer['temperature_fan chamber'] %}
	~chamber~
	{ "%3.0f" % (chamber.temperature,) }
	~degrees~

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    ~voron_heart~
    { " V2.1070 " }
  {% endif %}
  

[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117
